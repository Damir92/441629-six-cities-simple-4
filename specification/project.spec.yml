openapi: 3.1.0
info:
  title: API сервер для демо-проекта "Шесть городов".
  description: |-
    * Список ресурсов и маршрутов сервера «Шесть городов».
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 2.0.0
tags:
  - name: offer
    description: Действия с объявлениями.
  - name: city
    description: Действия с городами.
  - name: comment
    description: Действия с комментариями.
  - name: user
    description: Действия с пользователем.

paths:
  /offer:
    get:
      tags:
        - offer
      summary: Получить список предложений.
      description: Отдает список предложений.
      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema: {}
        required: true

      responses:
        "200":
          description: Список предложений.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/offerResponse"

  /user/register:
    post:
      tags:
        - user
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя.
      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createUser"
        required: true

      responses:
        "201":
          description: Пользователь зарегистрирован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"

        "409":
          description: Пользователь с таким email уже существует.

  /user/login:
    post:
      tags:
        - user
      summary: Авторизация пользователя
      description: Авторизует пользователя на основе логина и пароля
      requestBody:
        description: Информация для авторизации.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/authUser"
        required: true

      responses:
        "200":
          description: Пользователь авторизован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"

        "401":
          description: Неверный логин или пароль.

    get:
      tags:
        - user
      summary: Проверка состояния пользователя
      description: Возвращает информацию по авторизованному пользователю

      responses:
        "200":
          description: Пользователь авторизован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"

        "401":
          description: Неверный логин или пароль.

  /user/{userId}/avatar:
    post:
      tags:
        - user
      summary: Загрузить изображение аватара
      description: Загружает изображение аватара пользователя. Изображение
        аватара должно быть в формате `png` или `jpg`.
      requestBody:
        description: Информация для загрузки аватара.
        content:
          image/jpeg:
            schema:
              $ref: "#/components/schemas/userAvatar"
        required: true

      responses:
        "200":
          description: Аватар загружен. Объект с путем.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userAvatarResponse"

        "401":
          description: Неверный путь до файла.

components:
  schemas:
    createUser:
      type: object

      properties:
        email:
          type: string
          example: keks@htmlacademy.ru

        name:
          type: string
          example: Keks
        userType:
          type: base | pro
          example: base
        password:
          type: string
          example: 123456

    user:
      type: object
      properties:
        name:
          type: string
          example: Keks
        email:
          type: string
          example: keks@htmlacademy.ru
        avatar:
          type: string
          example: your-avatar.jpg
        userType:
          type: base | pro
          example: base
        token:
          type: string
          example: JWT-string

    authUser:
      type: object
      properties:
        email:
          type: string
          example: keks@htmlacademy.ru
        password:
            type: string
            example: 123456

    userAvatar:
      type: file
      properties:
        file: PATH_TO_FILE

    userAvatarResponse:
      type: object
      properties:
        avatar: code-of-avatar-filename

    offerResponse:
      type: object
      properties:
        id:
          type: string
          example: 649574b83f49ad8eeeabac13
        title:
          type: string
          example: Test house without auth
        description:
          type: string
          example: Offer for testing with long text
        postDate:
          type: Date
          example: 2022-05-12T11:56:37.573Z
        city:
          type: object
          example: { id: 123, name: Paris }
        preview:
          type: string
          example: image.jpg
        isPremium:
          type: boolean
          example: false
        rating:
          type: number
          example: 4
        offerType:
          type: string
          example: house
        price:
          type: number
          example: 100
        commentsCount:
          type: number
          example: 10
